//https://cnugteren.github.io/tutorial/pages/page3.html

typedef float2 cfloat;

//Add two complex numbers
inline cfloat cadd(cfloat a, cfloat b) {
    return a + b;
}

//Multiply two complex numbers
inline cfloat cmul(cfloat a, cfloat b) {
    return (cfloat)(a.x * b.x - a.y * b.y,
                    a.x * b.y + a.y * b.x);
}

__kernel void mul_mat(const int num_rows, const int num_cols, const int elements,
                    const __global cfloat *first,
                    const __global cfloat *second,
                    __global cfloat *output) {

    //The row that we are working on
    const int row = get_global_id(0);
    //The column that we are working on
    const int col = get_global_id(1);

    //Compute one element in the output based on this row and column
    cfloat accumulator = (cfloat)(0, 0);

    for(int k = 0; k < elements; k++) {
        cfloat item_in_first_matrix = first[k * num_rows + row];
        cfloat item_in_second_matrix = second[col * elements + k];

        accumulator = cadd(accumulator, cmul(item_in_first_matrix, item_in_second_matrix));
    }

    //Assign output matrix with value
    output[col * num_cols + row] = accumulator;
}
